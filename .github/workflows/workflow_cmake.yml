name: CMake

on:
  workflow_dispatch:
  push:
    branches: master
  pull_request:
    branches: master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RELEASE
  TOOLCHAIN: "10.3-2021.10"
  TOOLCHAIN_DIR: "gcc-arm-none-eabi-10.3-2021.10"
  TOOLCHAIN_TARBALL: "gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2"
  TOOLCHAIN_URL: "https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Checkout tools repo
      uses: actions/checkout@v2
      with:
        repository: google/googletest #     <-- clone https://github.com/org1/repo1
        path: googletest


    #- name: Setup Toolchain
    #  run: mkdir ${{github.workspace}}/toolchains && cd toolchains && wget ${{env.TOOLCHAIN_URL}} && tar -xf ${{env.TOOLCHAIN_TARBALL}} && cd ../

    - name: Clone GTest
      #run: git clone git@github.com:google/googletest.git && cd googletest && cmake -B build && make --directory=build && ln -s ${{github.workspace}}/tests
      run: cd googletest && cmake -B build && make --directory=build

    - name: List Files
      run:  pwd && ls -l ../../ && ls -l ../ && ls -l ./ && echo ${{github.workspace}} && ls -l ${{github.workspace}}

    - name: Link GTest
      run: cd ${{github.workspace}}/tests && ln -s ../googletest ./ && cd ../
 
    - name: List Files
      run:  pwd && ls -l ../../ && ls -l ../ && ls -l ./ && echo ${{github.workspace}} && ls -l ${{github.workspace}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DProjectName=DEMO

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ./build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ./build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      

